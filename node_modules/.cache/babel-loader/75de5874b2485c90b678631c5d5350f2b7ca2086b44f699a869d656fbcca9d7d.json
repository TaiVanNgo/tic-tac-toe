{"ast":null,"code":"var _jsxFileName = \"/Users/vantai/Learning/programming/react_project/tic-tac-toe/src/Game.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Board } from \"./Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = () => {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  //the xIsNext will be true if the nextMOve is even, and false if the next move is odd\n  const currentSquares = history[currentMove];\n  const handlePlay = nextSquares => {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    //This setHIstory will create the new array that contains all the items in \"history\"\n    //followed by the nextSquares.\n    //For example, if history is [[null,null,null], [\"X\",null,null]]\n    //and nextSquares is [\"X\",null,\"O\"], then the\n    //new [...history, nextSquares] array will be\n    //[[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]].\n  };\n  const jumpTo = nextMove => {\n    setCurrentMove(nextMove);\n  };\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          jumpTo(move);\n        },\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c = Game;\nconst calculateWinner = squares => {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    // If the values at indexes a, b, and c are all equal (either \"X\" or \"O\")\n    // and not null, then we have a winner\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","Board","jsxDEV","_jsxDEV","Game","_s","history","setHistory","useState","Array","fill","currentMove","setCurrentMove","xIsNext","currentSquares","handlePlay","nextSquares","nextHistory","slice","length","jumpTo","nextMove","moves","map","squares","move","description","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","onPlay","_c","calculateWinner","lines","i","a","b","c","$RefreshReg$"],"sources":["/Users/vantai/Learning/programming/react_project/tic-tac-toe/src/Game.jsx"],"sourcesContent":["import React from \"react\";\nimport { Board } from \"./Board\";\n\nexport const Game = () => {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  //the xIsNext will be true if the nextMOve is even, and false if the next move is odd\n  const currentSquares = history[currentMove];\n\n  const handlePlay = (nextSquares) => {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    //This setHIstory will create the new array that contains all the items in \"history\"\n    //followed by the nextSquares.\n    //For example, if history is [[null,null,null], [\"X\",null,null]]\n    //and nextSquares is [\"X\",null,\"O\"], then the\n    //new [...history, nextSquares] array will be\n    //[[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]].\n  };\n\n  const jumpTo = (nextMove) => {\n    setCurrentMove(nextMove);\n  };\n\n  const moves = history.map((squares, move) => {\n    let description;\n\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n\n    return (\n      <li key={move}>\n        <button\n          onClick={() => {\n            jumpTo(move);\n          }}\n        >\n          {description}\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n};\n\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    // If the values at indexes a, b, and c are all equal (either \"X\" or \"O\")\n    // and not null, then we have a winner\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}