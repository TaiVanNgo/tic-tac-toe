{"ast":null,"code":"var _jsxFileName = \"/Users/vantai/Learning/programming/react_project/tic-tac-toe/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Square = ({\n  value,\n  onSquareClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onSquareClick,\n    className: \"square\",\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n// function Board({ xIsNext, squares, onPlay }) {\n//   const winner = calculateWinner(squares);\n//   let status;\n//   if (winner) {\n//     status = \"Winner: \" + winner;\n//   } else {\n//     status = \"Next Player: \" + (xIsNext ? \"X\" : \"O\");\n//   }\n\n//   const handleClick = (i) => {\n//     if (squares[i] || calculateWinner(squares)) {\n//       //If the square at the index i already has data\n//       //we return it to prevent overwrite the existing data\n//       return;\n//       //or if the users already win (calculateWinner function), we return do not perform the tasks below\n//     }\n\n//     const nextSquares = squares.slice(); //Create the copy of the squares\n//     if (xIsNext) {\n//       //if X is the next move, we set the data to X\n//       nextSquares[i] = \"X\";\n//     } else {\n//       nextSquares[i] = \"O\";\n//     }\n\n//     onPlay(nextSquares);\n//   };\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       {/* show the status of the game */}\n//       <div className=\"board-row\">\n//         <Square\n//           value={squares[0]}\n//           onSquareClick={() => {\n//             handleClick(0);\n//           }}\n//         />\n//         <Square\n//           value={squares[1]}\n//           onSquareClick={() => {\n//             handleClick(1);\n//           }}\n//         />\n//         <Square\n//           value={squares[2]}\n//           onSquareClick={() => {\n//             handleClick(2);\n//           }}\n//         />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square\n//           value={squares[3]}\n//           onSquareClick={() => {\n//             handleClick(3);\n//           }}\n//         />\n//         <Square\n//           value={squares[4]}\n//           onSquareClick={() => {\n//             handleClick(4);\n//           }}\n//         />\n//         <Square\n//           value={squares[5]}\n//           onSquareClick={() => {\n//             handleClick(5);\n//           }}\n//         />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square\n//           value={squares[6]}\n//           onSquareClick={() => {\n//             handleClick(6);\n//           }}\n//         />\n//         <Square\n//           value={squares[7]}\n//           onSquareClick={() => {\n//             handleClick(7);\n//           }}\n//         />\n//         <Square\n//           value={squares[8]}\n//           onSquareClick={() => {\n//             handleClick(8);\n//           }}\n//         />\n//       </div>\n//     </>\n//   );\n// }\n// export default function Game() {\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\n//   const currentSquares = history[history.length - 1];\n\n//   function handlePlay(nextSquares) {\n//     setHistory([...history, nextSquares]);\n//     setXIsNext(!xIsNext);\n//   }\n\n//   return (\n//     <div className=\"game\">\n//       <div className=\"game-board\">\n//         <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n//       </div>\n//       <div className=\"game-info\">\n//         <ol>{/*TODO*/}</ol>\n//       </div>\n//     </div>\n//   );\n// }\n_c = Square;\nconst Game = () => {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n  const handlePlay = () => {\n    setHistory([...history, nextSquares]);\n    //This setHIstory will create the new array that contains all the items in \"history\"\n    //followed by the nextSquares.\n    //For example, if history is [[null,null,null], [\"X\",null,null]]\n    //and nextSquares is [\"X\",null,\"O\"], then the\n    //new [...history, nextSquares] array will be\n    //[[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]].\n\n    setXIsNext(!xIsNext);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"SgYnsXT3crq7e7AVQFAc92TDVPk=\");\n_c2 = Game;\nexport default Game;\nconst calculateWinner = squares => {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    // If the values at indexes a, b, and c are all equal (either \"X\" or \"O\")\n    // and not null, then we have a winner\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n    return null;\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Square","value","onSquareClick","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Game","_s","xIsNext","setXIsNext","history","setHistory","Array","fill","currentSquares","length","handlePlay","nextSquares","Board","squares","onPlay","_c2","calculateWinner","lines","i","a","b","c","$RefreshReg$"],"sources":["/Users/vantai/Learning/programming/react_project/tic-tac-toe/src/App.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nconst Square = ({ value, onSquareClick }) => {\n  return (\n    <button onClick={onSquareClick} className=\"square\">\n      {value}\n    </button>\n  );\n};\n\n// function Board({ xIsNext, squares, onPlay }) {\n//   const winner = calculateWinner(squares);\n//   let status;\n//   if (winner) {\n//     status = \"Winner: \" + winner;\n//   } else {\n//     status = \"Next Player: \" + (xIsNext ? \"X\" : \"O\");\n//   }\n\n//   const handleClick = (i) => {\n//     if (squares[i] || calculateWinner(squares)) {\n//       //If the square at the index i already has data\n//       //we return it to prevent overwrite the existing data\n//       return;\n//       //or if the users already win (calculateWinner function), we return do not perform the tasks below\n//     }\n\n//     const nextSquares = squares.slice(); //Create the copy of the squares\n//     if (xIsNext) {\n//       //if X is the next move, we set the data to X\n//       nextSquares[i] = \"X\";\n//     } else {\n//       nextSquares[i] = \"O\";\n//     }\n\n//     onPlay(nextSquares);\n//   };\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       {/* show the status of the game */}\n//       <div className=\"board-row\">\n//         <Square\n//           value={squares[0]}\n//           onSquareClick={() => {\n//             handleClick(0);\n//           }}\n//         />\n//         <Square\n//           value={squares[1]}\n//           onSquareClick={() => {\n//             handleClick(1);\n//           }}\n//         />\n//         <Square\n//           value={squares[2]}\n//           onSquareClick={() => {\n//             handleClick(2);\n//           }}\n//         />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square\n//           value={squares[3]}\n//           onSquareClick={() => {\n//             handleClick(3);\n//           }}\n//         />\n//         <Square\n//           value={squares[4]}\n//           onSquareClick={() => {\n//             handleClick(4);\n//           }}\n//         />\n//         <Square\n//           value={squares[5]}\n//           onSquareClick={() => {\n//             handleClick(5);\n//           }}\n//         />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square\n//           value={squares[6]}\n//           onSquareClick={() => {\n//             handleClick(6);\n//           }}\n//         />\n//         <Square\n//           value={squares[7]}\n//           onSquareClick={() => {\n//             handleClick(7);\n//           }}\n//         />\n//         <Square\n//           value={squares[8]}\n//           onSquareClick={() => {\n//             handleClick(8);\n//           }}\n//         />\n//       </div>\n//     </>\n//   );\n// }\n// export default function Game() {\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\n//   const currentSquares = history[history.length - 1];\n\n//   function handlePlay(nextSquares) {\n//     setHistory([...history, nextSquares]);\n//     setXIsNext(!xIsNext);\n//   }\n\n//   return (\n//     <div className=\"game\">\n//       <div className=\"game-board\">\n//         <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n//       </div>\n//       <div className=\"game-info\">\n//         <ol>{/*TODO*/}</ol>\n//       </div>\n//     </div>\n//   );\n// }\n\nconst Game = () => {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  const handlePlay = () => {\n    setHistory([...history, nextSquares]);\n    //This setHIstory will create the new array that contains all the items in \"history\"\n    //followed by the nextSquares.\n    //For example, if history is [[null,null,null], [\"X\",null,null]]\n    //and nextSquares is [\"X\",null,\"O\"], then the\n    //new [...history, nextSquares] array will be\n    //[[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]].\n\n    setXIsNext(!xIsNext);\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol></ol>\n      </div>\n    </div>\n  );\n};\nexport default Game;\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    // If the values at indexes a, b, and c are all equal (either \"X\" or \"O\")\n    // and not null, then we have a winner\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n\n    return null;\n  }\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,MAAM,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAc,CAAC,KAAK;EAC3C,oBACEH,OAAA;IAAQI,OAAO,EAAED,aAAc;IAACE,SAAS,EAAC,QAAQ;IAAAC,QAAA,EAC/CJ;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,GA3HMV,MAAM;AA6HZ,MAAMW,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,CAACoB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7D,MAAMC,cAAc,GAAGJ,OAAO,CAACA,OAAO,CAACK,MAAM,GAAG,CAAC,CAAC;EAElD,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBL,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEO,WAAW,CAAC,CAAC;IACrC;IACA;IACA;IACA;IACA;IACA;;IAEAR,UAAU,CAAC,CAACD,OAAO,CAAC;EACtB,CAAC;EAED,oBACEd,OAAA;IAAKK,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBN,OAAA;MAAKK,SAAS,EAAC,YAAY;MAAAC,QAAA,eACzBN,OAAA,CAACwB,KAAK;QAACV,OAAO,EAAEA,OAAQ;QAACW,OAAO,EAAEL,cAAe;QAACM,MAAM,EAAEJ;MAAW;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,eACNV,OAAA;MAAKK,SAAS,EAAC,WAAW;MAAAC,QAAA,eACxBN,OAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACG,EAAA,CA3BID,IAAI;AAAAe,GAAA,GAAJf,IAAI;AA4BV,eAAeA,IAAI;AAEnB,MAAMgB,eAAe,GAAIH,OAAO,IAAK;EACnC,MAAMI,KAAK,GAAG,CACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;EAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACR,MAAM,EAAES,CAAC,EAAE,EAAE;IACrC,MAAM,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGJ,KAAK,CAACC,CAAC,CAAC;IAC1B;IACA;IACA,IAAIL,OAAO,CAACM,CAAC,CAAC,IAAIN,OAAO,CAACM,CAAC,CAAC,KAAKN,OAAO,CAACO,CAAC,CAAC,IAAIP,OAAO,CAACM,CAAC,CAAC,KAAKN,OAAO,CAACQ,CAAC,CAAC,EAAE;MACxE,OAAOR,OAAO,CAACM,CAAC,CAAC;IACnB;IAEA,OAAO,IAAI;EACb;AACF,CAAC;AAAC,IAAApB,EAAA,EAAAgB,GAAA;AAAAO,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAP,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}